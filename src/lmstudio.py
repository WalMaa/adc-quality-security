import requests

# Define the base URL for the LM Studio API
base_url = "http://127.0.0.1:1234"

# Endpoint to get the list of available models
models_endpoint = "/v1/models"

def get_models():
    """
    Fetch the list of available models from LM Studio.
    """
    try:
        # Make a GET request to the models endpoint
        response = requests.get(base_url + models_endpoint)

        # Check if the request was successful
        if response.status_code == 200:
            models = response.json()
            return models
        else:
            print(f"Failed to fetch models. Status code: {response.status_code}")
            print(response.text)
    except Exception as e:
        print(f"An error occurred: {e}")
        
def call_lm_studio(scenarios, model_id):
    """
    Analyze scenarios using the selected LRM to obtain predicted remediation strategies and reasoning.
    """
    analysis_results = []
    for scenario in scenarios:
        try:
            # Make a POST request to the model inference endpoint
            response = requests.post(
                f"{base_url}/v1/completions",
                json={
                    "model": model_id,
                    "prompt": f"Analyze the following scenario and provide remediation strategies and reasoning:\n\n{scenario['DESCRIPTION']}",
                    "max_tokens": 150
                }
            )
            if response.status_code == 200:
                result = response.json()
                remediation_strategies = result.get("choices", [{}])[0].get("text", "").split("\n")
                reasoning = "Generated by AI model."
                for strategy in remediation_strategies:
                    if strategy.strip():
                        analysis_results.append({
                            "scenario_id": scenario["ID"],
                            "reasoning": reasoning,
                            "description": scenario["DESCRIPTION"],
                            "threat_id": "T1",  # Example threat ID
                            "vulnerability_id": scenario["ID"],
                            "remediation_id": strategy.strip()
                        })
            else:
                print(f"Failed to analyze scenario. Status code: {response.status_code}")
                print(response.text)
        except Exception as e:
            print(f"An error occurred: {e}")
    return analysis_results
        